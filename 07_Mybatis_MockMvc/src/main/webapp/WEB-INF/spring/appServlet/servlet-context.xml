<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">


	<!-- 
		servlet-context.xml
		- context 태그와 mvc 태그를 작성할 수 있도록 Nampspace context, mvc 체크
		- <mvc:annotation-driven /> 컨트롤러를 자동으로 찾아준다.
		- <context:component-scam …> 컴포넌트(빈) 오토 스캔
		- viewResolver
	-->
	
	
	<!--  
		Spring Legacy Project : 일반적인 스프링 프레임워크의 프로젝트를 말한다.
								라이브러리 설정을 자유롭게 할 수 있는데, 초반 설정 양이 많다.
								
		Spring MVC Project	  : Maven과 여러 라이브러리가 세팅되어 생성되는 애플리케이션.
		
		Maven 				  : 자바 프로젝트의 빌드를 자동화해주는 도구. 빌드 및 프로젝트 관리 도구.
								Maven이 없으면 매번 필요한 라이브러리들을 jar로 데려와서 집어넣어야 하는데, 
								이 경우 팀 단위 프로젝트를 할 때 매번 jar까지 맞춰서 넣어야 하는 작업이 필요하게 된다.
								Maven을 쓰면 pom.xml만 공유되면 나머지는 메이븐이 알아서 하므로 훨씬 원활하게 작업이 가능하다.
	-->
	
	
	
	<!-- 애너테이션 활성화 -->
	<annotation-driven />

	<!--
		정적 data 위치 매핑
		정적 자원(image, css, js 등)을 관리하는 디렉터리를 정한다.
		mapping="/resources/**"  :  주소에 "/resources"로 시작하는 경로가 나타나면
		location="/resources/"   :  resources 디렉터리로 연결하세요!
	-->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- ViewResolver(뷰 해석기) : 컨트롤러에서 반환하는 뷰(Jsp)를 해석한다.-->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- prefix="/WEB-INF/views/"  이 값은 컨트롤러가 반환한 값 앞에 붙인다. -->
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<!-- suffix=".jsp"             이 값은 컨트롤러가 반환한 값 뒤에 붙인다. -->
		<beans:property name="suffix" value=".jsp" />
		<!-- ViewResolver가 해석한 최종 결과 /WEB-INF/views/??.jsp -->
	</beans:bean>
	
	<!-- 
		"com.gdu.app02" 패키지를 스캔하며 annotaion이 달린 것을 bean으로 생성하여 Container에 담아둔다.
		@Component, @Controller, @Service, @Repository 등
		모든 구성 요소는 base-package 내부에 작성해야 한다.
			com.gdu.app02.controller
			com.gdu.app02.domain
			com.gdu.app02.repository
			com.gdu.app02.service
	-->
	<context:component-scan base-package="com.gdu.app07" />
	
</beans:beans>