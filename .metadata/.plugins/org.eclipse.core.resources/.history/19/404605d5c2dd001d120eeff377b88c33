<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

<!--  
	web.xml : Servlet Container 구동 파일.
			  - DispatcherServlet을 사용한다.(MVC 프로젝트의 핵심) 
			  - <filter> : /* 경로로 오는 요청은 
		   	  - <servlet-name>은 마음대로 작성
			  - <servlet-class>는 DispatcherServlet 클래스 로드
-->



  	<!-- 필터 -->
	<filter>
		<!-- 필터명을 설정 - encodingFilter -->
		<filter-name>encodingFilter</filter-name>
		<!-- 호출할 클래스 이름을 설정 (package 포함) -->
		<!-- CharacterEncodingFilter 클래스는 웹 요청과 응답에 대한 인코딩 처리를 위한 클래스이다. -->
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<!-- 클래스에서 사용할 파라미터 데이터 -->
		<!-- encodingFilter 필터에서만 사용 가능한 파라미터이다.(private 지역변수와 비슷하다.) -->
		<init-param>
			<!-- 인코딩 방식을 UTF-8로 하겠다. -->
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<!-- 인코딩을 강제(true)로 하겠다. -->
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<!-- 모든 요청을 필터명 encodingFilter을 호출하여 적용한다. -->
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- root-context.xml 설정 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/root-context.xml</param-value>
	</context-param>
	
		<!-- ContextLoaderListener : ontextConfigLocation에 있는 root-context를 불러온다. -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- 서블릿 -->
	<servlet>
		<!-- 서블릿명을 설정 - appServlet -->
		<servlet-name>appServlet</servlet-name>
		<!-- 호출할 클래스 이름을 설정 (package 포함) -->
		<!-- 
			DispatcherServlet
			1) 웹 어플리케이션 최전방에서 사용자 요청을 접수 빋는다.
			2) URL을 기준으로 요청을 처리할 Controller를 찾는다.
			3) 해당 Controller를 호출 및 실행한다.
			Controller
			1) 사용자 요청(URL 기반)에 해당하는 Controller의 특정 메소드가 호출된다.
			2) Controller는 요청의 파라미터가 있으면 처리하고,
			3) 비즈니스 처리를 위해서 서비스 컨포넌트를 주입 받아서 실행한다.
			4) 실행된 결과를 전달받아(화면에 대한 정보와 함께) DispatcherServlet에게 반환한다.
		-->
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- 클래스에서 사용할 파라미터 데이터 -->
		<!-- encodingFilter 필터에서만 사용 가능한 파라미터이다.(private 지역변수와 비슷하다.) -->
		<init-param>
			<!-- 스프링 프레임워크가 동작하기 위한 설정 파일의 위치를 알려주는 파라미터 -->
			<param-name>contextConfigLocation</param-name>
			<!-- 스프링 프레임워크 섷정 파일 경로 -->
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<!-- 톰캣 컨테이너의 우선 순위를 1순위로 설정한다. (톰캣 컨테이너가 실행되면서 서블릿이 초기화된다.) -->
		<load-on-startup>1</load-on-startup>
	</servlet>
		
	<servlet-mapping>
		<!-- 설정한 서블릿명과 매핑 설정에서의 서블릿명은 반드시 같아야 한다. -->
		<servlet-name>appServlet</servlet-name>
		<!-- URL 매핑을 '/'로 처리할 경우, DefaultServlet(DispatcherServlet) -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>

</web-app>