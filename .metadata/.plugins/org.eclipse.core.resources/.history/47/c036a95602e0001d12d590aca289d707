package com.gdu.app07.controller;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.gdu.app07.service.BoardService;

//DispatcherServlet으로부터 Controller로 스캔되어 Bean 객체에 저장된다.
@Controller
//특정 URI로 요청을 보내면 Controller에서 어떠한 방식으로 처리할지 정의하는 애너테이션.
//모든 요청에 대한 Mapping에 /board가 prefix(접두사)로 추가된다.
@RequestMapping("/board")
public class BoardController {
	
	// 클래스간의 의존관계를 Spring Container가 자동으로 연결해주는 애너테이션.
	@Autowired
	private BoardService boardService;
	
	/*
		데이터(속성) 저장 방법
		1. forward  : Model에 attribute로 저장한다.
		2. redirect : RedirectAttributes에 flashAttribute로 저장한다.
	*/
	
	// getBoardList() 서비스가 반환한 List<BoardDTO>를 /WEB-INF/views/board/list.jsp로 전달한다.
	@GetMapping("/list.do")
	// Model : Controller에서 생성된 데이터를 담아 View로 전달할 때 사용하는 객체이다.
	public String list(Model model) {
		// value(boardService.getBoardList()) 객체를 name(boardList) 이름으로 추가한다.(View 코드에서는 name으로 지정한 이름을 통해서 value를 사용한다.)
		model.addAttribute("boardList", boardService.getBoardList());
		return "board/list";
	}
	
	// getBoardByNo() 서비스가 반환한 BoardDTO를 /WEB-INF/views/board/detail.jsp로 전달한다.
	@GetMapping("/detail.do")
	public String detail(HttpServletRequest request, Model model) {
		model.addAttribute("b", boardService.getBoardByNo(request));
		
	}
	
	/*	
		@RequestParam : 요청 파라미터 애너테이션.
		value 		     : Key 값(board_no) 뒤에 오는 변수 board_no에 해당 값을 바인딩한다.
		required=false   : Key 값이 존재하지 않다고 해서 BadRequest(HTTP 400 오류)가 발생하지 않는다. (디폴트는 true)
		defaultValue="0" : 만약 Key 값이 존재하지 않다면, board_no 변수에 default로 0이 들어가게 된다.
	*/

}